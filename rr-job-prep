#!/bin/bash

################################################################################
# Copyright (c) 2012      Los Alamos National Security, LLC.
#                         All rights reserved.
#
# This program was prepared by Los Alamos National Security, LLC at Los Alamos
# National Laboratory (LANL) under contract No. DE-AC52-06NA25396 with the U.S.
# Department of Energy (DOE). All rights in the program are reserved by the DOE
# and Los Alamos National Security, LLC. Permission is granted to the public to
# copy and use this software without charge, provided that this Notice and any
# statement of authorship are reproduced on all copies. Neither the U.S.
# Government nor LANS makes any warranty, express or implied, or assumes any
# liability or responsibility for the use of this software.
################################################################################

# author: samuel k. gutierrez
# last updated: Mon Jul  9 20:37:19 MDT 2012

################################################################################
################################################################################
#         ONLY TESTED ON RR-LIKE SYSTEMS WITH PBS AND OPEN MPI 1.4.3!          #
################################################################################
################################################################################

# program name
declare -r PROG_NAME="rr-job-prep"
# program version
declare -r PROG_VER="0.2"
# name of the crunch-hang program
declare -r CRUNCH_NAME="crunch-hang"
# name of the full node set
declare -r ALL_NODES_FN="ALL"
# name of the subset node file
declare -r SUBSET_NODES_FN="SUB"
# the name of the supermagic output file
declare -r SMGC_OUT_FN="OUT"
# the name of the file containing all the bad nodes in a grep friendly way
declare -r BAD_NODE_LIST_FN="BAD_NODES"
# the name of the file containing all the bad nodes in a syslog friendly way
# that show the path triplets
declare -r BAD_NODE_TRIPLETS="BAD_NODE_TRIPLETS"
# bad node set egrep string
declare -r BAD_SET_REGEXP=\
"@@[0-9]+ \(\w+[.]*\w*\) ==> [0-9]+ \(\w+[.]*\w*\) ==> [0-9]+ \(\w+[.]*\w*\)@@"
# time between mpiruns (in seconds)
declare -r TIME_BETWEEN_RUNS=10
# items to be run on exit
declare -a on_exit_items
# this will eventually be set to a real value, but set to a safe default
tmp_base="/tmp"
# job id
jobid="unknown"
# timeout value (in seconds)
kill_timeout=600
# messaging timeout (s) - default is no timeout
smgc_msg_timeout=-1
# start date and time string
start_date_and_time="time unknown"

################################################################################
################################################################################
# exit/cleanup utility code
################################################################################
################################################################################
function on_exit()
{
    for i in "${on_exit_items[@]}"; do
        #echo "on_exit: $i"
        eval "$i" 2>&1 > /dev/null
    done
}

################################################################################
function add_on_exit()
{
    local n=${#on_exit_items[*]}
    on_exit_items[$n]="$*"
    if [[ $n -eq 0 ]]; then
        #echo "setting trap"
        trap on_exit EXIT
    fi
}

################################################################################
function usage()
{
cat << EOF
Usage:
    $PROG_NAME \
[OPTION] [/PATH/TO/SUPERMAGIC] [/PATH/TO/CRUNCH-HANG] \
[MIN PES] [HANG TIMEOUT (s)] [JOB PES] [YOUR RUN CMD]
Options:
    -v|--version
    -h|--help
About:
    $PROG_NAME attempts to find a good set of nodes within an allocation.
EOF
}

################################################################################
function run_and_pray()
{
    if [[ `have_enough_pes "$3"` -eq 0 ]]; then
        echo
        echo "##############################################################"
        echo "# cannot continue. not enough pes to meet minpe requirement. #"
        echo "##############################################################"
        echo
        note_bad_nodes
        exit 1;
    fi
    # if we are here, then try to run the messaging test
    ( mpirun --hostfile "$tmp_base/$SUBSET_NODES_FN" \
    "$1" -t small_all_to_all_ptp -T $smgc_msg_timeout 2>&1 | \
    tee "$tmp_base/$SMGC_OUT_FN" 2>&1 > /dev/null )&
    local cmd_pid=$!

    # setup the killer
    ( sleep $kill_timeout && \
      kill -9 $cmd_pid )&
    local killer_pid=$!

    wait $cmd_pid &> /dev/null
    wait_status=$?

    if [[ $wait_status -ne 0 ]]; then 
        echo "### RUN TIMEOUT EXCEEDED ###"
        echo "### JOBID: $jobid"
        # not much else we can do here... well, maybe that's not true, but it
        # is a little harder to deal with
        exit 1;
    else
        # "normal" exit, so clean up - we still don't know if things worked,
        # but we need to terminate the killer process
        #echo "### killing killer"
        disown $killer_pid
        kill $killer_pid
        # XXX big hammer ... fix this later
        killall -q sleep
    fi
    # now crunch the output from supermagic
    local crunch_out=`"$2" "$tmp_base/$SMGC_OUT_FN"`
    # success!
    if [[ "x$crunch_out" == "x### NO HANG ###" ]]; then
        echo
        echo "### successful run - we found a good set!"
        echo
        return 0;
    else
        # no love. we launched, but the job hung in messaging :-(.  update the
        # hostfile and return 1 - indicating that we failed to find a good set.
        return 1;
    fi
}

################################################################################
function cleanup_failed_run()
{
    killall -q -9 mpirun
    killall -q -9 supermagic
}

################################################################################
# $1 path to crunch-hang
# looking for something like:
# 1   2         3   4 5                     6   7 8
# @@4 (UNKNOWN) ==> 6 (ceb179a.localdomain) ==> 8 (UNKNOWN)@@
# XXX update later - really ugly
function remove_bad_nodes_from_set()
{
    local crunch_out=`$1 $tmp_base/$SMGC_OUT_FN`
    local bad_set=`echo -e "$crunch_out" | egrep "$BAD_SET_REGEXP"`
    # at this point we have the entire string, but we really only want the ranks
    local bad_ranks=`echo $bad_set | cut -d ' ' -f 1,4,7`
    # some more string prep - remove the '@@'
    bad_ranks=`echo $bad_ranks | sed 's/@@//g'`
    # now we have something like: 4 6 8
    local rone=`echo $bad_ranks | cut -d ' ' -f 1`
    local rtwo=`echo $bad_ranks | cut -d ' ' -f 2`
    local rthree=`echo $bad_ranks | cut -d ' ' -f 3`
    # ranks are base zero, so adjust for that
    (( rone+=1 ))
    (( rtwo+=1 ))
    (( rthree+=1 ))
    # get the node names - the rank will correspond to the line number
    local rone_name=`sed -n "${rone},${rone}p" "$tmp_base/$SUBSET_NODES_FN"`
    local rtwo_name=`sed -n "${rtwo},${rtwo}p" "$tmp_base/$SUBSET_NODES_FN"`
    local rthree_name=`sed -n "${rthree},${rthree}p" "$tmp_base/$SUBSET_NODES_FN"`
    # back to base zero for the user report
    (( rone-=1 ))
    (( rtwo-=1 ))
    (( rthree-=1 ))

    echo "### removing the following \"bad\" ranks:"
    echo "# rank $rone on $rone_name"
    echo "# rank $rtwo on $rtwo_name"
    echo "# rank $rthree on $rthree_name"

    # update the bad nodes list
    echo -e "$rone_name\n$rtwo_name\n$rthree_name" | \
    sort -n | uniq >> "$tmp_base/$BAD_NODE_LIST_FN"
    if [[ $? != 0 ]]; then
        echo "failure writing bad node list."
        exit 1;
    fi
    local log1="$rone_name could not talk to $rtwo_name in $msg_timeout seconds."
    local log2="$rtwo_name could not talk to $rthree_name in $msg_timeout seconds."
    log_funk "$log1" "$log2"
    echo "$log1" >> "$tmp_base/$BAD_NODE_TRIPLETS"
    echo "$log2" >> "$tmp_base/$BAD_NODE_TRIPLETS"
    # now update the subset of nodes to run on
    grep -v -f "$tmp_base/$BAD_NODE_LIST_FN" "$tmp_base/$ALL_NODES_FN" > \
    "$tmp_base/$SUBSET_NODES_FN"
    if [[ $? != 0 ]]; then
        echo "failure writing new node set"
        exit 1;
    fi
    # sleep a little to make sure the new file is written
    sleep 1
}

################################################################################
function have_enough_pes()
{
    local numpes=`wc -l "$tmp_base/$SUBSET_NODES_FN" | cut -d ' ' -f 1`
    if [[ "$numpes" -ge "$1" ]]; then
        echo 1
    else
        echo 0
    fi
}

################################################################################
function log_funk()
{
    logger $start_date_and_time -t $PROG_NAME -s -- "$1"
    logger $start_date_and_time -t $PROG_NAME -s -- "$2"
}

################################################################################
function note_bad_nodes()
{
    local trips=`cat "$tmp_base/$BAD_NODE_TRIPLETS"`
    if [[ -f "$tmp_base/$BAD_NODE_LIST_FN" ]]; then
        echo "##############################################################"
        echo "###               \"bad node\" list                          ###"
        echo "##############################################################"
        echo -e "$trips"
        echo "##############################################################"
    fi
}

################################################################################
function find_good_node_set()
{
    local run_status=0
    run_and_pray "$1" "$2" "$3"
    run_status=$?
    # iterate until we find a good set or run into the minpe limit
    while [[ $run_status == 1 ]]; do
        # cleanup a little before we try again...
        cleanup_failed_run
        # we don't want to overwhelm the system, so take a little break
        echo "### waiting $TIME_BETWEEN_RUNS s before next test..."
        sleep $TIME_BETWEEN_RUNS
        remove_bad_nodes_from_set "$2"
        echo "### trying another set..."
        run_and_pray "$1" "$2" "$3"
        run_status=$?
    done
    note_bad_nodes
}

################################################################################
function have_jobid()
{
    if [[ "x$PBS_JOBID" == "x" ]]; then
        echo 0
    else
        echo 1
    fi
}

################################################################################
# assuming sanity has already passed
function get_total_numpe()
{
    echo `wc -l $PBS_NODEFILE | cut -d ' ' -f 1`
}

################################################################################
function init()
{
    start_date_and_time=`date`
    # set some app params
    kill_timeout="$4"
    smgc_msg_timeout="$7"

    if [[ `have_jobid` -eq 1 ]]; then
        jobid="$PBS_JOBID"
    else
        echo "cannot determine job id."
        exit 1;
    fi

    tmp_base=`mktemp -d -t SMGCXXXX`
    local total_numpe=$(get_total_numpe)

    sanity "$1" "$2" "$3" "$5"

    echo
    echo "##############################################################"
    echo "###     cross your fingers and grab a cup of coffee        ###"
    echo "###                this may take a while                   ###"
    echo "###                                                        ###"
    echo "###              please ignore random output               ###"
    echo "##############################################################"
    echo
    echo "### $PROG_NAME $PROG_VER"
    echo "### start: $start_date_and_time"
    echo "### job id: $jobid"
    echo "### communication timeout: $smgc_msg_timeout s"
    echo "### single test timeout: $kill_timeout s"
    echo "### temp directory: $tmp_base"
    echo "### starting numpe: $total_numpe"
    echo "### minpes: $3"
    echo "### runpes: $5"
    echo

    # save a copy of the full list of nodes and start with a full set
    cp $PBS_NODEFILE "$tmp_base/$ALL_NODES_FN" && \
    cp "$tmp_base/$ALL_NODES_FN" "$tmp_base/$SUBSET_NODES_FN"
    if [[ $? != 0 ]]; then
        echo "cp failure!"
        exit 1;
    else
        # add cleanup code below
        add_on_exit rm -f "$tmp_base/$ALL_NODES_FN"
        add_on_exit rm -f "$tmp_base/$SUBSET_NODES_FN"
        add_on_exit rm -f "$tmp_base/$SMGC_OUT_FN"
        add_on_exit rm -f "$tmp_base/$BAD_NODE_LIST_FN"
        add_on_exit rm -f "$tmp_base/$BAD_NODE_TRIPLETS"
        add_on_exit rmdir "$tmp_base"
        add_on_exit killall -q -9 mpirun
        add_on_exit killall -q -9 supermagic
        # XXX big hammer - fix later
        add_on_exit killall -q sleep
    fi
}

################################################################################
# $1: path to supermagic
# $2: path to crunch-hang
# will exit with status 1 if app/env prerequisites are not met.
function sanity()
{
    local the_base=$(basename "$1")
    # check for mpirun
    type -p "mpirun" 2>&1 > /dev/null
    local tstat=$?
    if [[ $tstat -eq 1 ]]; then
        echo "mpirun not found. cannot continue."
        exit 1;
    fi
    # check for supermagic - at some point provide better detection
    if [[ "$the_base" == "supermagic" ]]; then
        # okay, the name is fine, but can we exec the thing?
        if [[ ! -x "$1" ]]; then
            echo "cannot continue: cannot execute "$1""
            exit 1;
        fi
    else
        echo -e "could not find supermagic:\n"$1" is not supermagic."
        exit 1;
    fi
    # check crunch-hang
    if [[ -x "$2" ]]; then
        local out_str=`"$2" --version`
        local cname=`echo "$out_str" | cut -f 1 -d ' '`
        if [[ "x$cname" != "x$CRUNCH_NAME" ]]; then
            echo -e "valid $CRUNCH_NAME not found:\n"$2" cannot be used."
            exit 1;
        fi
    else
        echo -e "could not execute crunch-hang:\n"$2"."
        exit 1;
    fi
    # is PBS_NODEFILE set? we need this to construct a node list.
    if [[ "x$PBS_NODEFILE" == "x" ]]; then
        echo "PBS_NODEFILE not set. this environment used in "$PROG_NAME"."
        exit 1;
    fi
    # do we have sane pe values
    if [[ ! $3 -ge $4 ]]; then
        echo "MIN PES must be greater than or equal to JOB PES."
        exit 1;
    fi
}

################################################################################
for i in $*; do
    case $1 in
        -h|--help)
            usage
            exit 0;
            ;;
        -v|--version)
            echo "$PROG_VER"
            exit 0;
            ;;
        --)
            shift
            break
            ;;
        -?|--?)
            echo "unknown option: \"$i\""
            exit 1;
            ;;
    esac
done

if [[ $# != 7 ]]; then
    usage
    exit 1;
else
    smgc_path="$1"
    msg_timeout="$2"
    crunch_path="$3"
    min_pes="$4"
    timeout="$5"
    user_pes="$6"
    user_app="$7"

    init "$smgc_path" "$crunch_path" "$min_pes" "$timeout" "$user_pes" "$user_app" "$msg_timeout"
    # if we are here, let the games begin...
    find_good_node_set "$smgc_path" "$crunch_path" "$min_pes"
    # now run your command
    zcmd="mpirun -n $user_pes --hostfile "$tmp_base/$SUBSET_NODES_FN" $user_app"
    echo
    echo "##############################################################"
    echo "###           about to start your application              ###"
    echo "##############################################################"
    echo
    echo "$zcmd"
    echo
    eval $zcmd
    exit $?;
fi
