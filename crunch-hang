#!/bin/bash

################################################################################
# Copyright (c) 2012      Los Alamos National Security, LLC.
#                         All rights reserved.
#
# This program was prepared by Los Alamos National Security, LLC at Los Alamos
# National Laboratory (LANL) under contract No. DE-AC52-06NA25396 with the U.S.
# Department of Energy (DOE). All rights in the program are reserved by the DOE
# and Los Alamos National Security, LLC. Permission is granted to the public to
# copy and use this software without charge, provided that this Notice and any
# statement of authorship are reproduced on all copies. Neither the U.S.
# Government nor LANS makes any warranty, express or implied, or assumes any
# liability or responsibility for the use of this software.
################################################################################

# author: samuel k. gutierrez
# last updated: Thu Jul 12 15:20:22 MDT 2012

declare -r PROG_NAME="crunch-hang"
declare -r PROG_VER="0.4"
declare -r MAGIC_STR="########## HANG DETECTED"
declare -r BAD_TRIP_REGEXP=\
'[0-9]+ \(\w+[.]*\w*\) ==> [0-9]+ \(\w+[.]*\w*\) ==> [0-9]+ \(\w+[.]*\w*\)'

# example output string from supermagic hang detection
# 1          2    3        4  5    6          7  8 9   10  1112  13  1415
# ########## HANG DETECTED on loop iteration: 10 0 (a) ==> 1 (b) ==> 2 (c)

usage()
{
cat << EOF
Usage:
    $PROG_NAME [OPTION] [/PATH/TO/HANG-OUTPUT-FILE]
Options:
    -v|--version
    -h|--help
About:
    $PROG_NAME processes supermagic hang detection output and attempts to
    identify the nodes responsible for the hang.
EOF
}

################################################################################
# output will be something like: "on loop iteration: 10"
# $1: file name
lowest_iter_string()
{
    local fname="$1"
    local res=`cat "$fname" | grep "$MAGIC_STR" | sort -n -k 7 | head -n 1 | \
    egrep -o "on loop iteration: [0-9]+"`
    echo "$res"
}

################################################################################
# $1: file name
# $2: target string
get_num_instances()
{
    echo `grep -c "$2" "$1"`
}

################################################################################
# $1: file name
# $2: target string
get_bad_paths()
{
    cat "$1" | grep "$MAGIC_STR" | sort -n -k 7 | head -n "$2" | \
    cut -d ' ' -f 8-15
}

################################################################################
# $1: file name
# $2: target string
disp_bad_paths()
{
    local fname="$1"
    local tstring="$2"
    local bad_paths=$(get_bad_paths "$fname" "$tstring")
    echo "### "$PROG_NAME" "$PROG_VER" ###"
    echo "### key: rank (name) ==> rank (name) ==> rank (name) ###"
    echo "one or more of the following paths appear to be broken:"
    echo -e "$bad_paths"
    the_bad_path=$(calc_bad_path "$fname" "$bad_paths")
    echo -e \
    "one or more of the the following ranks caused the hang:\n@@$the_bad_path@@"
}

################################################################################
# $1: file name
# $2: bad paths
# will be something like:
# 1    2         3   4   5                     6   7   8
# 1810 (UNKNOWN) ==> 239 (ceb180a.localdomain) ==> 692 (UNKNOWN)
# 239 (UNKNOWN) ==> 692 (ceb160a.localdomain) ==> 1145 (UNKNOWN)
calc_bad_path()
{
    local i=0 j=0
    local bad_paths=(0)
    local path_pairs
    local bad_path
    # work on each line and store the path
    while read path_i; do
        bad_paths[$i]=`echo "$path_i" | cut -d ' ' -f 1,4,7`
        (( i += 1 ))
    done < <(echo -e "$2")
    # store the path pairs
    for ((i = 0; i < ${#bad_paths[*]}; i++ )); do
        path_pairs[$j]=`echo "${bad_paths[$i]}" | cut -d ' ' -f 1-2`
        (( j++ ))
        path_pairs[$j]=`echo "${bad_paths[$i]}" | cut -d ' ' -f 2-3`
        (( j++ ))
    done
    # find the bad one
    # output will be something like (before processing):
    # 2 239 692
    # 1 692 1145
    # 1 1810 239
    # in this example, the bad path is between ranks 239 and 692
    local bad_path=`printf "%s\n" "${path_pairs[@]}" | sort -n | uniq -c | \
                    sed 's/^\s*//g' | sort -nr | head -n 1 | cut -d ' ' -f 2-3`
    local bone=`echo $bad_path | cut -d ' ' -f 1`
    local btwo=`echo $bad_path | cut -d ' ' -f 2`
    # at this point $bad_path has something like:
    # 239 692
    # now we have to find the full path within the file using the two ranks
    # that were called out in $bad_path ($bone and $btwo).
    local full_path=`cat "$1" | \
          egrep ""$bone" \(\w+[.]*\w*\) ==> "$btwo" \(\w+[.]*\w*\)"`
    #local full_path=`cat "$1" | \
    #      egrep "==> "$bone" \(\w+[.]*\w*\) ==> "$btwo" \(\w+[.]*\w*\)"`
    # at this point $full_path has the entire path string. we need to prep it
    # some more. so, do that...
    #  use head -n 1 to just choose one if there are multiples
    full_path=`echo $full_path | egrep -o "$BAD_TRIP_REGEXP" | head -n 1`
    echo $full_path
}

################################################################################
crunch()
{
    if [[ -r $1 ]]; then
        lis=$(lowest_iter_string "$1")
        # no hang output, no need to continue
        if [[ "x$lis" == "x" ]]; then
            echo "### NO HANG ###"
            exit 0;
        fi
        ni=$(get_num_instances "$1" "$lis")
        disp_bad_paths "$1" "$ni"
        return 0
    else
        echo "\"$1\" does not exist or is not readable."
        usage
        return 1
    fi
}

################################################################################
for i in $*; do
    case $1 in
        -h|--help)
            usage
            exit 0;
            ;;
        -v|--version)
            echo "$PROG_NAME $PROG_VER"
            exit 0;
            ;;
        --)
            shift
            break
            ;;
        -?|--?)
            echo "unknown option: \"$i\""
            exit 1;
            ;;
    esac
done

if [[ $# == 0 ]]; then
    usage
    exit 1;
else
    crunch $1
    exit $?;
fi
